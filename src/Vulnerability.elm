module Vulnerability
  ( Vulnerability
  , initial
  , next
  , vulnerable
  ) where

{-| Model the vulnerability state of the game.
-}

import Seat exposing (Seat)


{-| The current vulnerability.
-}
type alias Vulnerability =
  { northSouth : Bool
  , eastWest : Bool
  }


{-| The initial vulnerability state.
-}
initial : Vulnerability
initial = { northSouth = False, eastWest = False }


{-| The next vulnerability state, per Chicago rules, and
assuming that south deals first.
-}
next : Vulnerability -> Vulnerability
next vuln =
  case (vuln.northSouth, vuln.eastWest) of
    (False, False) -> { northSouth = False, eastWest = True }
    (False, True) -> { northSouth = True, eastWest = False }
    (True, False) -> { northSouth = True, eastWest = True }
    (True, True) -> { northSouth = False, eastWest = False }


{-| Check if a particular seat is vulnerable.
-}
vulnerable : Seat -> Vulnerability -> Bool
vulnerable seat vuln =
  case seat of
    Seat.North -> vuln.northSouth
    Seat.South -> vuln.northSouth
    Seat.East -> vuln.eastWest
    Seat.West -> vuln.eastWest
