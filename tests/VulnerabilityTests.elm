module VulnerabilityTests (all) where

import Seat
import Seat.Producer
import TestUtils
import Vulnerability
import Vulnerability.Producer

import Check
import ElmTest


all : ElmTest.Test
all =
  ElmTest.suite "Vulnerability"
    [ initialSuite
    , nextSuite
    , vulnerableSuite
    ]


initialSuite : ElmTest.Test
initialSuite =
  ElmTest.suite "initial"
    [ TestUtils.generativeTest <|
        Check.claim
          "nobody is vulnerable initially"
        `Check.false`
          (\seat -> Vulnerability.vulnerable seat Vulnerability.initial)
        `Check.for`
          Seat.Producer.seat
    ]


nextSuite : ElmTest.Test
nextSuite =
  ElmTest.suite "next"
    [ TestUtils.generativeTest <|
        Check.claim
          "vulnerability changes each deal"
        `Check.false`
          (\vuln -> Vulnerability.next vuln == vuln)
        `Check.for`
          Vulnerability.Producer.vulnerability

    , TestUtils.generativeTest <|
        Check.claim
          "vulnerability repeats every four deals"
        `Check.that`
          List.foldl (>>) identity (List.repeat 4 Vulnerability.next)
        `Check.is`
          identity
        `Check.for`
          Vulnerability.Producer.vulnerability
    ]


vulnerableSuite : ElmTest.Test
vulnerableSuite =
  ElmTest.suite "vulnerable"
    [ TestUtils.generativeTest <|
        Check.claim
          "north and south's vulnerability is always the same"
        `Check.that`
          Vulnerability.vulnerable Seat.North
        `Check.is`
          Vulnerability.vulnerable Seat.South
        `Check.for`
          Vulnerability.Producer.vulnerability

    , TestUtils.generativeTest <|
        Check.claim
          "east and west's vulnerability is always the same"
        `Check.that`
          Vulnerability.vulnerable Seat.East
        `Check.is`
          Vulnerability.vulnerable Seat.West
        `Check.for`
          Vulnerability.Producer.vulnerability
    ]
