module VulnerabilityTests exposing (all)

import Seat
import Seat.Producer
import TestUtils
import Vulnerability
import Vulnerability.Producer

import Check
import Check.Producer
import ElmTest


all : ElmTest.Test
all =
  ElmTest.suite "Vulnerability"
    [ initialSuite
    , nextSuite
    , vulnerableSuite
    , favorabilitySuite
    , opposingSuite
    ]


initialSuite : ElmTest.Test
initialSuite =
  ElmTest.suite "initial"
    [ TestUtils.generativeTest <|
        Check.claim
          "nobody is vulnerable initially"
        `Check.false`
          (\seat -> Vulnerability.vulnerable seat Vulnerability.initial)
        `Check.for`
          Seat.Producer.seat
    ]


nextSuite : ElmTest.Test
nextSuite =
  ElmTest.suite "next"
    [ TestUtils.generativeTest <|
        Check.claim
          "vulnerability changes each deal"
        `Check.false`
          (\vuln -> Vulnerability.next vuln == vuln)
        `Check.for`
          Vulnerability.Producer.vulnerability

    , TestUtils.generativeTest <|
        Check.claim
          "vulnerability repeats every four deals"
        `Check.that`
          List.foldl (>>) identity (List.repeat 4 Vulnerability.next)
        `Check.is`
          identity
        `Check.for`
          Vulnerability.Producer.vulnerability
    ]


vulnerableSuite : ElmTest.Test
vulnerableSuite =
  ElmTest.suite "vulnerable"
    [ TestUtils.generativeTest <|
        Check.claim
          "north and south's vulnerability is always the same"
        `Check.that`
          Vulnerability.vulnerable Seat.North
        `Check.is`
          Vulnerability.vulnerable Seat.South
        `Check.for`
          Vulnerability.Producer.vulnerability

    , TestUtils.generativeTest <|
        Check.claim
          "east and west's vulnerability is always the same"
        `Check.that`
          Vulnerability.vulnerable Seat.East
        `Check.is`
          Vulnerability.vulnerable Seat.West
        `Check.for`
          Vulnerability.Producer.vulnerability
    ]


favorabilitySuite : ElmTest.Test
favorabilitySuite =
  ElmTest.suite "favorability"
    [ TestUtils.generativeTest <|
        Check.claim
          "partners alwayssee the same vulnerability"
        `Check.that`
          (\(seat, vuln) -> Vulnerability.favorability seat vuln)
        `Check.is`
          (\(seat, vuln) -> Vulnerability.favorability (Seat.next <| Seat.next seat) vuln)
        `Check.for`
          Check.Producer.tuple (Seat.Producer.seat, Vulnerability.Producer.vulnerability)

    , TestUtils.generativeTest <|
        Check.claim
          "both partnerships see equal vulnerability"
        `Check.true`
          (\vuln -> Vulnerability.favorability Seat.North vuln == Vulnerability.Equal)
        `Check.for`
          (
            Vulnerability.Producer.vulnerability
              |> Check.Producer.filter (\vuln -> Vulnerability.favorability Seat.West vuln == Vulnerability.Equal)
          )

    , TestUtils.generativeTest <|
        Check.claim
          "partnerships disagree on favorable versus unfavorable vulnerability"
        `Check.false`
          (\vuln -> Vulnerability.favorability Seat.North vuln == Vulnerability.favorability Seat.West vuln)
        `Check.for`
          (
            Vulnerability.Producer.vulnerability
              |> Check.Producer.filter (\vuln -> Vulnerability.favorability Seat.West vuln /= Vulnerability.Equal)
          )
    ]


opposingSuite : ElmTest.Test
opposingSuite =
  ElmTest.suite "opposing"
    [ TestUtils.generativeTest <|
        Check.claim
          "is its own inverse"
        `Check.that`
          (Vulnerability.opposing >> Vulnerability.opposing)
        `Check.is`
          identity
        `Check.for`
          Vulnerability.Producer.favorability

    , TestUtils.generativeTest <|
        Check.claim
          "changes when not equal"
        `Check.false`
          (\fav -> Vulnerability.opposing fav == fav)
        `Check.for`
          (
            Vulnerability.Producer.favorability
              |> Check.Producer.filter (\fav -> fav /= Vulnerability.Equal)
          )
    ]
